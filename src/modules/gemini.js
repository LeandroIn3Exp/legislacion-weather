import { showLoading, addMessage, QUITO_COORDS } from '../main.js';
import { loadWeatherData } from './weather.js';

let geminiAPI = 'AIzaSyChkgOoEz0-nzzcB5RFttNQHQIwh_QZ_70';
let connectedAPIs = { weather: false, gemini: false };
let csvData = null;

// Enviar mensaje al chat
export async function sendMessage() {
    const messageInput = document.getElementById('user-message');
    const message = messageInput.value.trim();

    if (!message) return;

    if (!connectedAPIs.gemini) {
        alert('Conecta primero la API de Gemini');
        return;
    }

    addMessage('user', message);
    messageInput.value = '';

    showLoading(true);

    // Obtener datos meteorol√≥gicos actuales para contexto
    let weatherContext = '';
    if (connectedAPIs.weather) {
        try {
            const weatherResponse = await fetch(
                `https://api.openweathermap.org/data/2.5/weather?lat=${QUITO_COORDS[0]}&lon=${QUITO_COORDS[1]}&appid=${weatherAPI}&units=metric&lang=es`
            );
            const weatherData = await weatherResponse.json();
            
            weatherContext = `\n\nDATOS METEOROL√ìGICOS ACTUALES DE QUITO (OpenWeather):
- Temperatura: ${weatherData.main.temp}¬∞C
- Humedad: ${weatherData.main.humidity}%
- Presi√≥n: ${weatherData.main.pressure} hPa
- Viento: ${weatherData.wind.speed} m/s
- Condici√≥n: ${weatherData.weather[0].description}
- Visibilidad: ${weatherData.visibility} metros`;
        } catch (error) {
            console.error('Error obteniendo datos meteorol√≥gicos:', error);
        }
    }

    const prompt = `Eres un experto en gesti√≥n h√≠drica y meteorolog√≠a de Quito, Ecuador. Responde con conocimiento t√©cnico especializado.

CONSULTA DEL USUARIO: ${message}

CONTEXTO QUITO:
- Ubicaci√≥n: Andes ecuatorianos, 2,850 msnm
- Infraestructura h√≠drica: 39 plantas potabilizadoras
- Sistemas principales: Pita-Tambo, La Mica-Quito Sur, Papallacta Integrado
- Vulnerabilidades: volcanes, deslizamientos, variabilidad clim√°tica
- Cobertura: 98.2% agua potable, 92% alcantarillado${weatherContext}

INSTRUCCIONES:
- Proporciona recomendaciones t√©cnicas espec√≠ficas para Quito
- Considera los datos meteorol√≥gicos actuales en tu an√°lisis
- Incluye medidas preventivas y de gesti√≥n de riesgos
- Explica c√≥mo las condiciones actuales afectan la gesti√≥n h√≠drica
- Sugiere acciones concretas basadas en la situaci√≥n meteorol√≥gica

Responde de manera t√©cnica pero comprensible, con recomendaciones pr√°cticas.`;

    try {
        console.log('Enviando mensaje a Gemini...');
        console.log('Prompt enviado:', prompt.substring(0, 200) + '...');
        
        const response = await fetch(
            `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiAPI}`,
            {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    contents: [{ parts: [{ text: prompt }] }]
                })
            }
        );

        console.log('Respuesta mensaje - Status:', response.status);

        if (!response.ok) {
            const errorData = await response.json();
            console.error('Error en mensaje:', errorData);
            throw new Error(`Error ${response.status}: ${errorData.error?.message || 'Error desconocido'}`);
        }

        const data = await response.json();
        console.log('Respuesta mensaje recibida:', data);
        
        if (data.candidates && data.candidates[0]) {
            const answer = data.candidates[0].content.parts[0].text;
            addMessage('assistant', answer);
        } else {
            throw new Error('Respuesta vac√≠a de Gemini AI');
        }
    } catch (error) {
        console.error('Error enviando mensaje:', error);
        addMessage('assistant', `‚ùå Error de conexi√≥n con Gemini AI: ${error.message}\n\nVerifica tu API key y cuota disponible.`);
    }

    showLoading(false);
}

// Generar reporte de alertas
export async function generateRiskReport() {
    if (!connectedAPIs.gemini || !connectedAPIs.weather) {
        alert('Conecta ambas APIs para generar el reporte');
        return;
    }

    showLoading(true);

    try {
        // Obtener datos meteorol√≥gicos para el reporte
        const weatherResponse = await fetch(
            `https://api.openweathermap.org/data/2.5/weather?lat=${QUITO_COORDS[0]}&lon=${QUITO_COORDS[1]}&appid=${weatherAPI}&units=metric&lang=es`
        );
        const forecastResponse = await fetch(
            `https://api.openweathermap.org/data/2.5/forecast?lat=${QUITO_COORDS[0]}&lon=${QUITO_COORDS[1]}&appid=${weatherAPI}&units=metric&lang=es`
        );
        
        const weatherData = await weatherResponse.json();
        const forecastData = await forecastResponse.json();

        const prompt = `Genera un reporte completo de alertas de riesgo para Quito basado en datos meteorol√≥gicos actuales de OpenWeather.

DATOS METEOROL√ìGICOS ACTUALES:
- Temperatura: ${weatherData.main.temp}¬∞C
- Humedad: ${weatherData.main.humidity}%
- Presi√≥n: ${weatherData.main.pressure} hPa
- Viento: ${weatherData.wind.speed} m/s, direcci√≥n ${weatherData.wind.deg}¬∞
- Condici√≥n: ${weatherData.weather[0].description}
- Visibilidad: ${weatherData.visibility} metros
- Sensaci√≥n t√©rmica: ${weatherData.main.feels_like}¬∞C

PRON√ìSTICO 5 D√çAS:
${forecastData.list.slice(0, 8).map(item => 
    `${new Date(item.dt * 1000).toLocaleDateString('es-ES')}: ${item.main.temp}¬∞C, ${item.weather[0].description}, Humedad ${item.main.humidity}%`
).join('\n')}

GENERA REPORTE CON:

1. NIVEL DE ALERTA GENERAL (Verde/Amarillo/Naranja/Rojo)
2. RIESGOS ESPEC√çFICOS POR ZONA:
   - Norte de Quito (Carcel√©n, Calder√≥n)
   - Centro (Centro Hist√≥rico, La Mariscal)
   - Sur (Quitumbe, Chillogallo)
   - Valles (Tumbaco, Cumbay√°)

3. ALERTAS HIDROL√ìGICAS:
   - Riesgo de inundaci√≥n por precipitaciones
   - Vulnerabilidad en plantas potabilizadoras
   - Posibles afectaciones en captaci√≥n La Mica
   - Estado de sistemas de distribuci√≥n

4. RECOMENDACIONES INMEDIATAS:
   - Para autoridades (EPMAPS, Municipio)
   - Para ciudadanos
   - Medidas preventivas por sector

5. CRONOGRAMA DE SEGUIMIENTO:
   - Pr√≥ximas 24 horas
   - Pr√≥ximos 3 d√≠as
   - Pr√≥xima semana

Considera factores espec√≠ficos de Quito: altitud, topograf√≠a, √©poca del a√±o, vulnerabilidades volc√°nicas y s√≠smicas.

Formato: Reporte t√©cnico oficial con niveles de urgencia claros.`;

        const response = await fetch(
            `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiAPI}`,
            {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    contents: [{ parts: [{ text: prompt }] }]
                })
            }
        );

        const data = await response.json();
        
        if (data.candidates && data.candidates[0]) {
            const report = data.candidates[0].content.parts[0].text;
            
            // Actualizar panel de alertas
            const alertsContent = document.getElementById('alerts-content');
            alertsContent.innerHTML = `
                <div class="alert-item">
                    <h4>üìã REPORTE GENERADO - ${new Date().toLocaleString('es-EC')}</h4>
                    <div style="white-space: pre-wrap; margin-top: 15px;">${report}</div>
                    <div style="margin-top: 15px; padding-top: 15px; border-top: 1px solid #ddd; font-size: 0.9em;">
                        <strong>üìä Fuentes de datos:</strong><br>
                        ‚Ä¢ Datos meteorol√≥gicos: OpenWeather API en tiempo real<br>
                        ‚Ä¢ An√°lisis predictivo: Google Gemini AI<br>
                        ‚Ä¢ Contexto local: Sistema de gesti√≥n h√≠drica de Quito (EPMAPS)<br>
                        ‚Ä¢ Generado: ${new Date().toLocaleString('es-EC')}
                    </div>
                </div>
            `;

            // Tambi√©n agregar al chat
            addMessage('assistant', `üö® REPORTE DE ALERTAS GENERADO\n\nSe ha creado un reporte completo de riesgos basado en:\n- Datos meteorol√≥gicos actuales de OpenWeather\n- An√°lisis predictivo con Gemini AI\n- Contexto espec√≠fico de Quito\n\nRevisa el panel de alertas para ver el reporte completo.`);

            // Crear archivo descargable
            createDownloadableReport(report, weatherData);
        }
    } catch (error) {
        console.error('Error generando reporte:', error);
        addMessage('assistant', 'Error al generar el reporte de alertas. Verifica las conexiones API.');
    }

    showLoading(false);
}

// Crear archivo descargable del reporte
function createDownloadableReport(report, weatherData) {
    const reportContent = `REPORTE DE ALERTAS HIDROMETEOROL√ìGICAS - QUITO
================================================================

Fecha de generaci√≥n: ${new Date().toLocaleString('es-EC')}
Fuente de datos: OpenWeather API + An√°lisis Gemini AI

CONDICIONES METEOROL√ìGICAS ACTUALES:
- Temperatura: ${weatherData.main.temp}¬∞C
- Humedad: ${weatherData.main.humidity}%
- Presi√≥n: ${weatherData.main.pressure} hPa
- Viento: ${weatherData.wind.speed} m/s
- Condici√≥n: ${weatherData.weather[0].description}

AN√ÅLISIS Y RECOMENDACIONES:
${report}

================================================================
Sistema Hidrol√≥gico y Meteorol√≥gico de Quito
Desarrollado con OpenWeather API y Google Gemini AI
================================================================`;

    const blob = new Blob([reportContent], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `Reporte_Alertas_Quito_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);

    addMessage('assistant', 'üìÑ Reporte descargado exitosamente. El archivo contiene el an√°lisis completo con recomendaciones espec√≠ficas para Quito.');
}

// An√°lisis inicial al conectar APIs
export async function generateInitialAnalysis() {
    try {
        const weatherResponse = await fetch(
            `https://api.openweathermap.org/data/2.5/weather?lat=${QUITO_COORDS[0]}&lon=${QUITO_COORDS[1]}&appid=${weatherAPI}&units=metric&lang=es`
        );
        const weatherData = await weatherResponse.json();

        const prompt = `Bas√°ndote en las condiciones meteorol√≥gicas actuales de Quito, proporciona un an√°lisis inicial del estado del sistema h√≠drico.

DATOS ACTUALES:
- Temperatura: ${weatherData.main.temp}¬∞C
- Humedad: ${weatherData.main.humidity}%
- Condici√≥n: ${weatherData.weather[0].description}
- Presi√≥n: ${weatherData.main.pressure} hPa

Como experto en recursos h√≠dricos de Quito, eval√∫a:
1. Estado general del sistema basado en condiciones actuales
2. Riesgos inmediatos por zona
3. Recomendaciones operativas para las pr√≥ximas 24 horas
4. Impacto en plantas potabilizadoras

Respuesta breve y t√©cnica.`;

        const response = await fetch(
            `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiAPI}`,
            {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    contents: [{ parts: [{ text: prompt }] }]
                })
            }
        );

        const data = await response.json();
        
        if (data.candidates && data.candidates[0]) {
            const analysis = data.candidates[0].content.parts[0].text;
            addMessage('assistant', `üåü AN√ÅLISIS INICIAL DEL SISTEMA\n\n${analysis}\n\n‚úÖ Sistema conectado y operativo. Datos en tiempo real desde OpenWeather API.`);
        }
    } catch (error) {
        console.error('Error en an√°lisis inicial:', error);
    }
}

// Funci√≥n de diagn√≥stico espec√≠fica para Gemini
export async function diagnoseGeminiAPI() {
    const apiKey = document.getElementById('gemini-key').value.trim() || geminiAPI;
    
    addMessage('assistant', 'üîç Iniciando diagn√≥stico de Gemini API...');
    
    console.log('=== DIAGN√ìSTICO GEMINI API ===');
    console.log('API Key format:', apiKey.length, 'caracteres');
    console.log('Primeros 10 caracteres:', apiKey.substring(0, 10));
    console.log('√öltimos 5 caracteres:', apiKey.substring(apiKey.length - 5));
    
    // Verificar formato de API Key
    if (!apiKey.startsWith('AIza')) {
        addMessage('assistant', '‚ùå Error: API Key de Gemini debe comenzar con "AIza"');
        return;
    }
    
    if (apiKey.length < 35) {
        addMessage('assistant', '‚ùå Error: API Key parece muy corta. Debe tener ~39 caracteres');
        return;
    }
    
    // Probar diferentes endpoints
    const endpoints = [
        'gemini-pro',
        'gemini-1.5-flash',
        'gemini-1.5-pro'
    ];
    
    for (const model of endpoints) {
        try {
            addMessage('assistant', `üß™ Probando modelo: ${model}...`);
            console.log(`Probando modelo: ${model}`);
            
            const response = await fetch(
                `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`,
                {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        contents: [{ 
                            parts: [{ text: "Responde con una sola palabra: OK" }] 
                        }]
                    })
                }
            );
            
            console.log(`${model} - Status:`, response.status);
            console.log(`${model} - Status Text:`, response.statusText);
            
            if (response.ok) {
                const data = await response.json();
                console.log(`${model} - Respuesta exitosa:`, data);
                addMessage('assistant', `‚úÖ ${model}: FUNCIONANDO`);
                
                // Actualizar configuraci√≥n con el modelo que funciona
                geminiAPI = apiKey;
                connectedAPIs.gemini = true;
                document.getElementById('gemini-status').innerHTML = '<i class="fas fa-robot"></i> Gemini: Conectado';
                document.getElementById('gemini-status').className = 'status-indicator status-connected';
                
                addMessage('assistant', `üéâ ¬°√âxito! Gemini conectado usando modelo: ${model}`);
                return;
            } else {
                const errorData = await response.json();
                console.error(`${model} - Error:`, errorData);
                addMessage('assistant', `‚ùå ${model}: Error ${response.status} - ${errorData.error?.message || 'Error desconocido'}`);
            }
        } catch (error) {
            console.error(`Error probando ${model}:`, error);
            addMessage('assistant', `‚ùå ${model}: Error de conexi√≥n - ${error.message}`);
        }
    }
    
    // Si llegamos aqu√≠, ning√∫n modelo funcion√≥
    addMessage('assistant', `‚ùå DIAGN√ìSTICO COMPLETO - GEMINI NO CONECTADO
    
Posibles soluciones:
1. Verifica que tu API Key sea correcta en: https://makersuite.google.com/app/apikey
2. Aseg√∫rate de que Gemini API est√© habilitada para tu proyecto
3. Verifica que tengas cuota disponible
4. Intenta generar una nueva API Key
5. Confirma que tu regi√≥n sea compatible

La API Key actual parece tener el formato correcto pero no funciona con ning√∫n modelo disponible.`);
}